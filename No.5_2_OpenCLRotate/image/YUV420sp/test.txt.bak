
[参考]
http://stackoverflow.com/questions/3138090/how-to-rotate-yuv420-data/10004761#10004761


YUV420 图像旋转

为了和 GPU 对比，使用 OpenCL 操作，突出 GPU 的性能。

每个像素对应一个 y 分量，四个像素（2x2）共享一组 u、v 分量。x 和 y 格式的不同之处
在于 u、v 分量在内存中的分布。


[////]
http://www.cnblogs.com/azraelly/archive/2013/01/01/2841269.htm

YUV420 旋转 90 度

YUV 和我们熟知的 RGB 类似，是一种颜色编码格式。它主要用于电视系统和模拟视频邻域（如 Camera 系统）。
YUV 包含三个分量，其中 "Y" 表示明亮度（Luminance或Luma），也就是灰度值。而 "U" 和 "V" 则表示色度（Chrominance 或 Chroma），
作用是表示图像色彩及饱和度，用于指定像素的颜色。没有 UV 分量信息，一样可以显示完整的图像，只不过是黑白的灰度图像。YUV 格式
的好处是很好地解决了彩色电视机与黑白电视机的兼容问题。并且，YUV 不像 RGB 那样要求三个独立的视频信号同时传输，所以用 YUV 方
式传送占用极少的频宽。

YUV 格式包含两大类，分别为 planar 和 packed。
对于 planar 格式，先连续存储所有像素点的 Y 分量，紧接着存储所有像素点的 U 分量，最后是所有像素点的 V 分量；
对于 packed 格式，和 planar 格式一样，也是先连续存储所有像素点的 Y 分量，紧接着存储所有像素点的 UV 分量，不同的是，UV 分量是交替存放的。

在 YUV420 中，一个像素点对应一个 Y，一个 2x2的小方块对应一个U和V，上面两类格式的 Y 值在排列是完全相同的，只有 Y 的图像就是灰度图像。
YUV420sp 与 YUV420p 的数据格式在 UV 的排列上不同，420p 它是先存放完 U 分量，再存放 V 放量，也就是说他们的 UV 分量是连续的。而 420sp
它的 UV 分量是按照 UV、UV…… 这样交替存放的。一个 YUV420 在内存中占用的大小为 width * height = Y（总和） U=Y/4 V=Y/4

下面对 YUV420 planar 旋转 90 度

假设原始图像的宽度和高度分别使用 width 和 height 表示，旋转前的图像是 width x height，旋转后的图像是 height x height，旋转前后
图像大小保持不变：
（1）图像占用内存空间的大小： width * height * 3 / 2
（2）Y 分量的大小：width x height
（3）Y 分量中每个 2x2 的小方块对应一个 U 和 V
（4）U 分量大小为 (width/2)*(height/2)，存放的位置从图像的 width * height 偏移位置开始
（5）V 分量大小为 (width/2)*(height/2)，存放的位置从图像的 width * height + (width * height)/4

旋转
（1）从 Y 分量开始，第一个像素在原来数组的 (h-1)*w 位置，拷贝到目标数组的（0,0）位置；
第二个像素在（h-2）*w 位置，拷贝到（0,1）位置，以此类推；
（2）记住 U 和 V 分量大小为 (W/2) * (H/2)；
（3）接下来拷贝 U 分量。第一个拷贝在原始数组的 (w*h) + (((h/2)-1) * (w/2)) 位置，拷贝
到目标位置 (h*w)+(0,0)；第二个像素从 (w*h) + (((h/2)-2) * (w/2)) 位置，拷贝到
(h*w)+(0,0) 位置。
（4）最后拷贝 V 分量。第一个像素从 (w*h) + ((w*h)/4) + (((h/2)-1) * (w/2)) 位置，拷贝到
(h*w)+((w*h)/4) + (0,0) 位置；第二个像素从 (w*h) + ((w*h)/4) + (((h/2)-2) * (w/2)) 位置，拷贝到
(h*w)+((w*h)/4) + (0,1) 位置，以此类推。

目标数组包含了旋转后的图像。

下面是一幅 10x6 的图像




