[Ref]
https://www.codeproject.com/Articles/990983/Androids-Graphics-Buffer-Management-System-Part-II

Android 的图形缓冲区管理系统（第二部分：BufferQueue）


在前一篇文章 `Android's graphics buffer management` 中，我讨论了 gralloc，它是
Android 图像缓冲区分配的 HAL 层。在这篇文章中，我将描述 Android 中的图形缓冲区
（graphics buffers）流程，并特别关注 `BufferQueue` 类，它在图形缓冲区的管理中发
挥了核心作用。

简介
在开始之前，我想讨论一下通用的缓冲区。...

数据缓冲区，特别是图像和图形数据缓冲区，作为特定子系统的一部分，例如 camera
子系统，但是也可以跨越多个子系统，例如在 camera 和 video 子系统之间共享的缓冲
区。缓冲区提供了一种暂时存放数据的方法，使我们能够在时间和空间上将数据的生产
与数据的消费分开。也就是说，我们可以在某一时刻生产数据，而在另一个时刻使用数
据。这讲生产者和消费者分开，并且允许生产者和消费者的行为异步执行。通常在一个事
件驱动的系统中，数据的生产者和数据的消费者通过不同的时钟源来触发。例如，手机
上的 camera 以任意的帧率产生图像帧（例如，30 帧每秒，FPS），同时显示面板（显示
预览）可以运行在不同的刷新率（例如，60HZ）。还有，即使设备能够保证在相同的频
率下操作，它们也不可能拥有相同的相位偏移，由于我们打开屏幕的时候显示操作开始，
当我们启动 camera 应用时，camera 操作在另一个任意的时间开始。当然还有漂移和抖
动导致两个子系统的异步行为。也有可能同时拥有多个消费者，或者多个生产者。例如
Surfaceflinger，使用来自多个源头的缓冲区，并将它们合成后输出到单个缓冲区。

缓冲区也允许我们从系统的一部分移动数据到另一部分。毫无疑问，缓冲区遵循我们系统
中的一些路径，这些通常称作`数据路径`。路径可能从缓冲区的提供者开始，它分配新
的内存，或者从预分配的内存池中提供缓冲区。在这个阶段，缓冲区被认为是空的。也
就是说，它们不包含可消费的数据或元数据（metadata）。源实体通过将自己和缓冲区
关联来提供初始化数据（reference holding buffers），或者将数据拷贝到缓冲区的
内存。无论如何，缓冲区会沿着缓冲区处理程序的处理路径前进，直到到达内容消费者
那里，消费这使用数据，并丢弃缓冲区（ps: 缓冲区就像 JD 快递的纸盒）。缓冲区处
理程序可能是被动的（例如，监视器或日志记录器），或者主动的：过滤、改变、补充、
提取或以其它方式对内容的操作。这些路径可以是动态的或者静态的。有很多设计模式，
它们定义了数据路径是如何定义和控制的（管道、过滤器、分层、流水线、软件总线消
息、直接寻址、广播、观察等），我不会包含这些内容，因为那会和我们的话题不一样。

缓冲区系统可以是闭环或非闭环的。在闭环的路径中，拥有一条从消费者回到生产者的
缓冲区路径。有时这是明确的，有时又是隐式的。例如，生产者和消费者共享使用一个
共享内存池，它们隐式的形成闭环。有人可能会说，使用共享缓冲池并不是真正的闭环，
但我认为，只要系统在设计时，使用了明确的共享缓冲区内存的知识，这就是闭环的。
也就是说，如果消费者可以使生产者饥饿或等待，由于它控制了可用于生产者使用的缓
冲区流程，这就是一个闭环系统。

额，还有一个问题，我们所说的缓冲区是指的是什么。很多时候，当人们说缓冲
区 "buffer" 时，它们指的是实际的后端内存存放的内容，但是在实际系统中，原始数
据在系统中移动是非常罕见的。缓冲区对象包含用来描述数据内容的元数据（metadata）
是非常常见的。在元数据中包含的内容和实现相关，并且依赖问题的范围和上下文，但
我可以确定，我们同意的是，我们需要知道的信息是存储在缓冲区中的数据量。还有一
个数据指针（引用）相对于嵌入的数据（值）的问题。显然，零拷贝的缓冲区处理是首
选的，但需要我们确切的知道对缓冲区内存生命周期的管理。生命周期管理，访问管理
和同步是其它相关的方面，这在前面的帖子中有讨论。

BufferQueue
在讨论数据缓冲区之后，我们最后可以进入对 Android 系统的详细描述。我们将从
BufferQueue 类开始，这是因为它是 Android 中图像缓冲区运动的中心。它抽象了
图形缓冲区的队列，使用 gralloc 来分配缓冲，并使用一些方法来连接缓冲区的生
产者和消费者，他们驻留在不同进程的地址空间。

将要讨论的 BufferQueue 类和很多相关类的代码可以
在 `/frameworks/native/libs/gui` 目录中找到，对应的头文件在
`frameworks/natvie/include/gui` 目录中。

BufferQueue 类拥有一个静态工厂（static factory）方法，
为 BufferQueue::createBufferQueue，它用来创建 BufferQueue 实例。
(BufferQueue 管理 gralloc 内存槽的池，用于生产者和消费者。分配器用于分配所
有需要的 gralloc 缓冲区)。

简单的浏览了它的实现，BufferQueue 是很薄的类。是 BufferQueueCore 的实现，它
包含了真正的实现逻辑。为了简化这些讨论，后面将对这些类不做区分。

通过 BufferQueue 连接后相当直观。首先，生产者和消费者链接到 BufferQueueu。
1. 生产者从 BufferQueue（dequeueBuffer）取一个空的（empty）缓冲区；
2. 生产者（例如， camera）拷贝拷贝图像或图形数据到缓冲区中；
3. 生产者将填充（filled）好的的缓冲区返回给 BufferQueue（queueBuffer）；
4. 消费者接收了一个表明已经存在填充数据的缓冲区，通过回调函数（callback）；
5. 消费者将这个缓冲区从 BufferQueue 中移除（acquireBuffer）；
6. 当消费者完成消费后，会将缓冲区返回给 BufferQueueu（releaseBuffer）。

下面的图显示了在 camera（图像缓冲区的生产者）和显示器（图像缓冲区的消费者）之
间的一个简单交互。
...	...	...（图形）
Camera 系统和 GPU 之间简单的数据路径。

生产者和消费者可能驻留在不同的进程中，这使用 Binder 来通信。

BufferQueueProducer 是实际干活的，它在 IGraphicBufferProducer 的后面。
BufferQueueProducer 和 BufferQueueCore 维护了一个亲密关系，并直接访问它的
成员变量，包括互斥量、条件和其它的重要成员（例如指向 IGraphicBufferAlloc 的
指针）。就我个人而言我不太喜欢，这样太混乱和脆弱。

当生产者请求提供一个空的缓冲区时使用 dequeueBuffer，它尽量从 BufferQueueCore
取缓冲区，BufferQueueCore 维护了一个缓冲区的数组和这些缓冲区的状态（DEQUEUED，
QUEUED，ACQUIRED，FREE）。如果在缓冲区数组中找到了一个空闲的槽（slot），但是
它并没有包含缓冲区，或者如果生产者明确的请求重新分配缓冲区，接着
BufferQueueProducer 使用 BufferQueueCore 的来分配一个新的缓冲区。

初始状态，所有对 dequeueBuffer 的调用会导致分配一个新的缓冲区。但由于这是闭环
系统，一旦消费者使用完了其内容后，缓冲区的消费者将返回缓冲区（通过调用
releaseBuffer），我们因该会看到在很快的时候后系统会达到平衡。注意，虽然
BufferQueueCore 可以维护一个可变大小的 GraphicBuffer 对象的数组，让所有缓冲区
保持相同大小是明智的。否则，每次对 dequeueBuffer 的调用可能需要重新分配一个
新的 GraphicBuffer 实例。
...	...	... （图形）
和 BufferQueue 相关的主要的类。

GraphicBuffer 的分配执行使用了 IGraphicBufferAlloc 的实现，当在构造的时候提
供给了 BufferQueueCore。默认的 IGraphicBufferAlloc 的实现由 SurfaceFlinger
来提供（系统对象负责所有 surfaces 的合成），并且使用 gralloc 来分配缓冲区。
（ps: 这里是说 SF 使用 gralloc 来分配缓冲区 ）






































