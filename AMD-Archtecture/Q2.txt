1.AMD GPU 硬件实现是如何映射到 OpenCL 设备模型的？

AMD APP 利用 GPU 巨大的处理能力，用于高性能、数据并行计算应用；

统一着色器的好处
在同一个硬件上交错的运行不同的内核；

工作项
运行在计算单元上的内核实例称作工作项；
运行在 cpu 上的程序实例称作进程，但是在 Linux 中进程可以作为调度单位，
而在 AMD 的 GPU 中，调度单位是 wavefront，它包含了 64 个工作项；

工作项映射到一个 `n-维` 的索引空间，称作 NDRange。`n-维`索引空间可以
对每个维度的空间进行单独的引用，只需填充对应的索引号即可。

处理
GPU 调度一定数量（range）工作项到一组处理元素（processing element）上
进行处理，直到所有的工作项处理完成。随后，可以执行内核，知道应用执行完
成。

工作项到处理元素的映射

工作组和计算单元（CU）
工作组安排到计算单元上执行。一个工作组中的所有工作项只能被单个 CU 中的
处理元素处理。一个处理元素在同一时刻只能处理一个工作项；然而，一个 CU
可以处理多个工作组。

OpenCL 将所有将要执行的工作项映射到一个 `n-维` 网格（ND-Range）。开发人
员可以指定如何将这些工作项划分到工作组中（例如：可以根据任务的属性来指定）。

Wavefront
AMD 的 GPU 基于 wavefronts 执行（多个工作组在计算单元上以 lock-step 的
方式执行）；每个工作组有整数个 wavefronts。

在 AMD APP 环境中，硬件调度工作项执行的时候包括一个中间步骤，用来指定一个
工作组中的 wavefronts。这样在 AMD GPUs 上能获得最大性能。

`n-维`索引空间（NDRange）中，每个维度可以包含多个工作组，每个工作组中有
多个工作项，多个工作项构成一个 wavefront，由硬件决定(xbdong，小结)。

2.1.1执行工作项
一个计算单元中所有的处理元素在同一个周期执行相同的指令。一个工作项每个时
钟周期可以发射一条指令。当多个工作项（一块工作项）一起执行时称作 `wavefront`。

为了隐藏由于内存访问和处理元素执行带来的延迟，同一个 wavefront 中多达 4 个
工作项以流水线（pipelined）方式在同一个流处理器（stream core）上执行。
（一个计算单元包含多个流处理器，例如 16 时，是以和中 pipeline 方式执行的？）

例如，在 AMD 7970 GPU 计算设备上，16 个处理元素（PEs）分四个周期来执行相同
的指令，这呈现（表示）为计算单元的执行宽度为 64-wide。
（这个又和硬件指定的 wavefront 关联起来）

在不同的 GPU 计算设备上，wavefronts 的大小可能不同。例如，一些低端和旧
的 GPUs，像 AMD 54XX 系列的图形卡，它对应 wavefront 的大小为 32 个工作项。
高端和较新的 AMD GPUs 对应的 wavefront 包含 64 个工作项。

计算单元之间的操作相互独立，因此，对于不同的计算单元它们执行的指令可能不同。

在讨论流控之前，澄清 wavefront 和工作组之间的关系非常重要。如果用于定义了
一个工作组，它包含了一个或多个 wavefronts。wavefront 是一个硬件线程，它包含
了自己的程序计数器（program count）；它可以用来跟踪流控，这和其它的 wavefront
相互独立。一个 wavefront 包含 64 个或少于 64 个工作项。映射基于线性的工作项顺
序。在一个 wavefront 为 64 的设备上，0-63 工作项映射到 wavefront 0，工作项
64-127 映射到 wavefront 1，以此类推。为了充分的利用硬件，建议工作项的数目是
wavefront 的倍数。

2.1.2创建工作项
对于每个工作组，GPU 计算设备在单个计算单元中分配请求的 wavefronts 的个数。
如果在一个 wavefront 中没有活动的工作项，映射到这些工作项的流处理
器（stream core）处于空闲（idle）状态。例如，一个工作组的大小不是 wavefront
的整数倍（像：工作组的大小是 32，wavefront 的有一半是空的并且没有使用）

2.1.3流控
流控，例如分支，实现是将所有可能的路径组合为一个 wavefront。一个 wavefront
中的一个工作项走了分支，所有的路径都将串行执行。例如，一个工作项包含一个两个
路径的分支，该 wavefront 首先执行第一个路径，接着执行第二个路径。执行这个分
支的总时间是两条路径相加的结果。需要明确的是，即使 wavefront 中只有一个工作
项执行了分支，该 wavefront 中剩下的工作项也将执行该分支。在一个分支中，必须
执行的工作项数目称作分支粒度（branch granularity）。在 AMD 硬件中，分支粒度
的大小和 wavefront 中的工作项数目相等。

通过下面的代码来构造 mask 对应的工作项（将 wavefront mask 看作工作项的真值
表达式）：

当 x 表达式的值为 true 时，`wavefront mask` 对应的工作项设置为 true，此时执
行 A。反之，如果 mask 的值为 false，将执行 B。

例1，如果两个分支 A 和 B，花费相同的时间 t 来执行一个 wavefront。如果任何
工作项走了不同的分支，则总的时间为 2t；

循环执行的方式类似，只要 wavefront 中仍然有工作项在处理，wavefront 将占据
这个计算单元。因此，wavefront 总的执行时间，由 wavefront 中执行最长时间的
工作项决定。

例2，如果 t 是一个循环中执行单次迭代所花费的时间；在一个 wavefront 中，所有
的工作项执行一次这个循环，除了一个工作项执行 100 次循环，则执行整个 wavefront
所花费的时间为 100t。







