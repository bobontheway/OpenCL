1.1接口的定义
接口的声明由访问修饰符、interface 关键字、接口名称、逗号分割的父接口（如果有的话），
以及接口体组成。例如：

public interface GroupInterface extends Interface1, Interface2, interface3 {
	// constant declarations

	// base of natural logarithms
	double E = 2.718282;

	// mothod signatures
	void doSomething(int i, double x);
	int doSomethingElse(String s);
}

public 访问修饰符表示接口可以被任何类使用，不管该类在哪里包中。
如果接口的访问修饰符没有指定为 public，那么接口只能被同一包中定义的类访问。

接口可以从其它的接口扩展，就像类或子类从其它的类扩展

接口可以扩展自其它的接口，就像类或子类从其它的类扩展
一样。然而，类只能从其它的某个类扩展，但接口可以从任
意数量的几口扩展。接口声明包括一个逗号分隔的列表，列
出了它所扩展的所有接口。

1.1.1接口体
接口体是打括号中包含的部分。它可以包含抽象方法、默认
方法和静态方法。接口中的抽象方法以分号结尾（不包括大
括号，抽象方法不包含实现）；默认方法定义时使用了
default 修饰符，同时静态方法使用了 static 关键字。接
口中所有的抽象、默认和静态方法隐式（默认情况下）使用
了 public 访问修饰符，因此可以省略 public 修饰符。

还有，接口可以包含常量声明。接口中定义的所有常量值隐
式（默认情况下）使用了 public，static 和 final 修饰。
这就可以省略这些修饰符。

1.2接口的实现
若要声明实现接口的类，需要在类的声明时包括一个
implements 从句。类可以实现多个接口，因此 implements
关键字后跟类实现的由逗号分隔的接口列表。按照约定，
implements 从句跟在 extends 从句的后面（如果有 extends
从句）。

Relatable 接口示例
考虑一个定义如何比较对象大小的接口。
public interface Relatable {
	public int isLargerThan(Relatable other);
}

如果希望能够比较类似对象的大小，不管它们是什么对象，
实例化他们的类应该实现 Relatable 接口。

如果有某种方法来比较从类实例化的对象的相对“大小”，

如果要比较对象的“大小”，实现了 Relatable 接口的类可以比较这些的数据。
对于字符串，它可以是字符数；对于书籍，它可能是页数；对于书籍，它可能是页数，等。
对于平面几何对象，面积将是一个很好的选择（如下面的
RectanglePlus 类），而体积将用于三维几何对象。这些
类都需要实现 isLargerThan() 方法。


任何类都可以实现 Relatable。对于字符串，它可能是字符数；
对于书籍，它可能是页数；对于学生来说，它可能是重量，等等。
对于平面几何对象，面积将是一个很好的选择（如下面的
RectanglePlus 类），而体积将用于三位几何对象。这些
类都可以实现 isLargerThan() 方法。

实现 Relatable 接口
下面是 Rectangle 类，实现了 Relatable 接口。

public class RectanglePlus implements Relatable {
	public int width = 0;
	public int height = 0;
	public Point origin;

	// four constructors
	public RectanglePlus() {
		origin = new Point(0, 0);
	}

	public RectanglePlus(Point p) {
		origin = p;
	}

	public RectanglePlus(int w, int h) {
		origin  = new Point(0, 0);
		width = w;
		height = h;
	}


	public RectanglePlus(Point p, int w, int h) {
		origin = p;
		width = w;
		height = h;
	}

	// a method for moving the rectangle
	public void move(int x, int y) {
		origin.x = x;
		origin.y = y;
	}

	// a method for computing the area of the rectangle
	public int getArea() {
		return width * height;
	}

	// a method required to implement the Relatable interface
	puhblic int isLargerThan(Relatable other) {
		RectanglePlus otherRect = (RectanglePlus)other;
		if (this.getArea() < otherRect.getArea())
			return -1;
		else if (this.getArea() > otherRect.getArea())
			return 1;
		else
			return 0;
	}
}

由于 RectanglePlus 类实现了 Relatable 接口，任意两个 RectanglePlus
对象的大小都可以比较。

注意：
定义在 Relatable 接口中的 isLargerThan 方法，包含一个 Relatable 类型的
对象。上面示例中以粗体显示的代码行将 other 转换为 RectanglePlus 实例。
类型转换告诉编译器真正的对象是什么。直接在 other 实例上调用 getArea 
（other.getArea()）将编译失败，这是因为编译器并不理解 other 实际上是
RectanglePlus 的实例。

1.3将接口当作类型来使用
定义新的接口时，将定义新的引用数据类型。可以在任何可以使用其它数据类型
名称的位置使用接口名称。如果定义的引用变量的类型是接口，则分配（赋值）
给它的任何对象都必须是实现该接口的类的实例。

例如，下面是在一对对象中查找最大对象的方法，这些对象来自于对实现了
Relatable 接口的类的实例化。

public Object findLargest(Object object1, Object object2) {
	Relatable obj1 = (Relatable)object1;
	Relatable obj2 = (Relatable)object2;
	if ((obj1).isLargerThan(obj2) > 0)
		return object1;
	else
		return object2;
}

通过将 object1 转换为 Relatable 类型，它可以调用 isLargerThan 方法。

如果在各种各样的类中实现 Relatable 接口，则可以将从这些类中实例化的
对象与 findLargest() 方法进行比较——前提是两个对象都是相同的类。同理，
它们也都可以使用下面的方法比较：

public Object findSmallest(Object object1, Object object2) {
	Relatable obj1 = (Relatable)object1;
	Relatable obj2 = (Relatable)object2;
	if ((obj1).isLargerThan(obj2) < 0)
		return object1;
	else
		return object2;
}

public boolean isEqual(Object object1, Object object2) {
	Relatable obj1 = (Relatable)object1;
	Relatable obj2 = (Relatable)object2;
	if ((obj1).isLargerThan(obj2) == 0)
		return true;
	else
		return false;
}

这些方法对任何 "relatable" 对象都起作用，无论他们的类继承是什么（继
承关系如何）。当它们实现 “Relatable” 时，它们可以是他们自己的类（或
超类）类型和 Relatable 类型。这为它们提供了多重继承的一些优点，它们
可以从超类和接口中获得行为（方法调用）。


这些方法对任何 "relatable" 对象都起作用，不管它们的类继承关系如何。
当类实现 `Relatable` 接口时，传递给上面函数的对象可以是类本身或超类的类型，也可以是 Relatable 类型。
这就是多重继承的好处，它们可以同时包含超类和接口的功能。

它们就可以同时包含超类和接口的功能。

1.4接口的演进
考虑一个已经开发称作 DoIt 的接口：
public interface DoIt {
	void doSomething(int i, double x);
	int doSomethingElse(String s);
}

假设以后要将第三个方法添加到 DoIt 中，这样该接口现在变成：

public interface DoIt {
	void doSomething(int i, double x);
	int doSomethingElse(String s);
	boolean didItWork(int i, double x, String s);
}


如果按照上面的修改，那么之前实现了 DoIt 接口的类都将不能正常工作。
由于没有实现 didItWork 方法，将出现错误，这种做法过于粗暴，对开发人员来说很不友好。

（为什么会抱怨？需要重新编译？）

在定义接口时，尽量预测接口的所有用途，并从一开始就指定。如果以后想往接口中添加其它方法，有多个选
项供选择。可以创建一个扩展自 DoIt 的 DoItPlus 接口。



public interface DoItPlus extends DoIt {
	boolean didItWork(int i, double x, String s);
}




现在代码的用户可以选择继续使用旧的接口或者更新到新的接口。


这样，实现 DoIt 接口的类可以选择继续使用旧的接口或者更新到新的接口。

或者在 DoIt 接口中将新的方法定义为 `default` 方法。下面的示例定义了一个名
为 didItWork 的默认方法。


public interface DoIt {
	void doSomething(int i, double x);
	int doSomethingElse(String s);
	default boolean didItWork(int i, double x, String s) {
		// Method body
	}
}

注意，必须为 default 方法提供实现。也可以在现有的接口中定义
新的 static 方法。

在接口中增加了新的 default 或 static 方法后，那些实现了 DoIt 接口的类，无需修改或重新编译照样能正常工作。

当用户实现了使用新的 default 或 static 方法来增强的接口的
类时，不必修改或重新编译就可以适应（容纳）新增加的方法。














待办：
（1）示例程序，说明上面在扩展接口成员时，为什么用户会抱怨？
- 答，在类中必须实现接口中的所有方法，否则它不然会报错。


