1.5 Default 方法
Interface 部分描述了一个例子，它设涉及由计算机控制的汽车的制造商，
它们发布行业标准接口，描述了可以调用哪些方法来操作他们的汽车。要
是这些电脑控制的汽车的制造商为汽车增加新的功能怎么办呢，如飞行功
能？这些制造商需要指定新的方法，以使其它公司（如电子制导仪器制造
商）能够调整自己的软件以适应飞行汽车。那这些汽车制造商在哪里声明
这些新的飞行相关的方法呢？如果他们将新的方法添加到原始接口中，那
么实现这些接口的程序员就必须重写它们的实现。如果他们将它们添加为
static 方法，那么程序员就会将它们看作是工具（实用）方法，而不是关
键的核心方法。

default 方法使你能够向库的接口中添加新的功能，并确保为这些接口的
旧的版本编写的代码具有二进制兼容性。

考虑下面的 TimeClient 接口，在 Answers to Questions and Exercises:
Interfaces 中描述:

import java.time.*;

public interface TimeClient {
	void setTime(int hour, int minute, int second);
	void setDate(int day, int month, int year);
	void setDAteAndTime(int day, int month, int year,
		int hour, int minute, int second);
	LocalDateTime getLocalDateTime();
}

下面的 SimpleTimeClient 类实现了 TimeClient 接口：

package defaultmethods;
import java.time.*;
import java.lang.*;
import java.util.*;

public class SimpleTimeClient implements TimeClient {
	private LocalDateTime dataAndTime;

	public SimpleTimeClient() {
		dateAndTime = LocalDateTime.now();
	}

	public void setTime(int hour, int minute, int second) {
		LocalDate currentDate = LocalDate.from(dateAndTime);
		LocalTime timeToSet = LocalTime.of(hour, minute, second);
		dateAndTime = LocalDateTime.of(currentDate, timeToSet);
	}

	public void setDate(int day, int mouth, int year) {
		LocalDate dateToSet = LocalDate.of(day, mounth, year);
		LocalTime currentTime = LocalTime.from(dateAndTime);
		dateAndTime = LocalDateTime.of(dateToSet, currentTime);
	}

	public void setDateAndTime(int day, int mouth, int year,
		int hour, int minute, int second) {
		LocalDate dateToSet = LocalDate.of(day, mounth, year);
		LocalTime timeToSet = LocalTime.of(hour, minute, second);
		dateAndTime = LocalDateTime.of(dateToSet, timeToSet);
	}

	public LocalDateTime getLocalDateTime() {
		return dateAndTime;
	}

	public String toString() {
		return dateAndTime.toString();
	}

	public static void main(String... args) {
		TimeClient myTimeClient = new SimpleTimeClient();
		System.out.println(myTimeClient.toString());
	}
}

假设要向　TimeClient 接口中添加新的功能，例如，通过　ZonedDateTime
对象（和　LocalDateTime 对象类似，除了它存储的是时区信息）来指定
时区的能力。

public interface TimeClient {
	void setTime(int hour, int minute, int second);
	void setDate(int day, int month, int year);
	void setDAteAndTime(int day, int month, int year,
		int hour, int minute, int second);
	LocalDateTime getLocalDateTime();
	ZoneDateTime getZonedDateTime(String zoneString);
}

在对 TimeClient 接口进行修改之后，还必须修改　SimpleTimeClient 类并实现
getZonedDateTime 方法。但是，除了将　getZonedDateTime 定义为抽象方法（如
前面的示例所示），还可以将它定义为 default 的实现（记住，抽象方法是在没
有具体实现的情况下声明的方法）。

public interface TimeClient {
	void setTime(int hour, int minute, int second);
	void setDate(int day, int month, int year);
	void setDAteAndTime(int day, int month, int year,
		int hour, int minute, int second);
	LocalDateTime getLocalDateTime();

	static ZoneId getZoneId(String zoneString) {
		try {
			return ZoneId.of(zoneString);
		} catch (DateTimeException e) {
			System.err.println("Invalid time zone: " +
				zoneString + "; using default time zone
				instead.");
			return ZoneId.systemDefault();
		}
	}

	default ZoneDateTime getZonedDateTime(String zoneString) {
		return ZonedDateTime.of(getLocalDateTime(),
			getZoneId(zoneString));
	}
}

在方法签名的开头使用 default 关键字，可以将接口中定义的方法指定
为默认方法。接口中声明的所有方法（包括 default 方法）默认为 public，
因此可以省略 public 修饰符。

使用了此接口，就不必修改 SimpleTimeClient 类，而此类（以及实现了
TimeClient 接口的任何类）将包含已定义的 getZonedDateTime 方法。下
面的示例，TestSimpleTimeClient，从 SimpleTimeClient 的实例中调用
了 getZonedDateTime 方法。

扩展（Extending）包含 default 方法的接口
在扩展包含 default 方法的接口时，可以执行下面的操作：
- 不要再管 default 方法，这可以让扩展的接口继承 default 方法；
- 重新声明 default 方法，让它变为抽象方法（abstract）；
- 重新定义 default 方法，执行重写操作；

假如按照如下的方式扩展 TimeClient 接口：
public interface AnotherTimeClient extends TimeClient {
}

任何实现 AnotherTimeClient 接口的类，都将包含 TimeClient.getZonedDateTime
 default 方法指定的实现。

假设按照如下的方式扩展 TimeClient 接口：
public interface AbstractZoneTimeClient extends TimeClient {
	public ZonedDateTime getZonedDateTime(String zoneString);
}

任何实现 AbstractZoneTimeClient 接口的类都必须实现 getZonedDateTime 方法。
这是一种抽象方法，与接口中所有其它的 nondefault 和 nonstatic 方法类似。

假设按照如下的方式扩展了 TimeClient 接口：

public interface HandleInvalidTimeZoneClient extends TimeClient {
	default public ZonedDateTime getZonedDateTime(String zoneString) {
		try {
			return ZonedDateTime.of(getLocalDateTime(),
				ZoneId.of(zoneString));
		} catch (DateTimeException e) {
			System.err.println("Invalid zone ID: " + zoneString +
				"; using the default time zone instead.");
			return ZonedDateTime.of(getLocalDateTime(), ZoneId.systemDefault());
		}
	}
}

任何实现 HandleInvalidTimeZoneClient 的类都将使用此接口中指定的实现，而不
是由 TimeClient 指定的。

静态（Static）方法
除了 default 方法，也可以在接口中定义 static 方法。（静态方法是与定义它的
类相关联的方法，而不是与对象关联）。类的每个实例共享其静态方法。这可以更容易的在库
中组织帮助（helper）方法。可以在同一接口中保留特定于接口的静态方法，而不是在
单独的类中。下面的示例定义了一个 static 方法，它检索与时区标识符相对应的
ZoneId 对象。如果没有与特定标识符相对应的 ZoneId 对象，则使用系统默认的时
区（因此，可以简化 getZonedDateTime 方法）：

public interface TimeClient {
	// ...
	static public ZoneId getZoneId(String zoneString) {
		try {
			return ZoneId.of(zoneString);
		} catch (DateTimeException e) {
			System.err.println("Invalid time zone: " +
				zoneString + "; using default time zone
				instead.");
			return ZoneId.systemDefault();
		}
	}

	default ZoneDateTime getZonedDateTime(String zoneString) {
		return ZonedDateTime.of(getLocalDateTime(), getZoneId(zoneString));
	}
}

和类中的 static 方法类似，可以在方法签名的开头添加 static 关键字，以指定
接口中定义的方法为 static 方法。所有在接口中声明的方法，包括 static 方法，
默认状态为 public，因此可以省略 public 修饰符。

将 default 方法集成到现有库中
default 方法使你可以向现有接口添加新的功能，并确保与为这些接口的较早版本
编写的代码具有二进制兼容性。特别是，default 方法允许添加可以接受 lambda
表达式作为参数的方法到现有接口中。这部分演示如何如何使用 default 和 static
方法来增强比较器接口。

Card 接口包含两个枚举类型（Suit 和 Rank）和两个抽象方法（getSuit 和 getRank）。

public interface Card extends Comparable<Card> {
	public enum Suit {
		DIAMONDS (1, "Diamonds"),
		CLUBS	 (2, "Clubs"),
		HEARTS   (3, "Hearts"),
		SPADES   (4, "Spades");

		private final int value;
		private final String text;
		Suit(int value, String text) {
			this.value = value;
			this.text = text;
		}
		public int value() {return value;}
		public String text() {return text;}
	}

	public enum Rank {
		DEUCE  (2, "Two"),
	    THREE  (3, "Three"),
		FOUR   (4, "Four"),
		FIVE   (5, "Five"),
		SIX    (6, "Six"),
		SEVEN  (7, "Seven"),
		EIGHT  (8, "Eight"),
		NINE   (9, "Nine"),
		TEN    (10, "Ten"),
		JACK   (11, "Jack"),
		QUEEN  (12, "Queen"),
		KING   (13, "King"),
		ACE    (14, "Ace");

		private final int value;
		private final String text;
		Rank(int value, String text) {
			this.value = value;
			this.text = text;
		}

		public int value() {return value;}
		public String text() {return text;}
	}

	public Card.Suit getSuit();
	public Card.Rank getRank();
}

Deck 接口包含了不同的方法，在 deck 中操作 cards：

public interface Deck {
	List<Card> getCards();
	Deck deckFactory();
	int size();
	void addCard(Card card);
	void addCards(List<Card> cards);
	void addDeck(Deck deck);
	void shuffle();
	void sort();
	void sort(Comparator<Card> c);
	String deckToString();

	Map<Integer, Deck> deal(int players, int numberOfCards)
		throws IllegalArgumentException;
}

PlayingCard 类实现了 Card 接口，StandardDeck 实现了 Deck 接口。

StandardDeck 类实现的抽象方法 Deck.sort 如下所示：

public class StandardDeck implements Deck {
	private List<Card> entireDeck;

	// ...

	public void sort() {
		Collections.sort(entireDeck);
	}

	// ...
}

Collections.sort 对 List 实例进行排序，它的元素类型实现了 Comparable
接口。entireDeck 成员是 List 的实例，它的元素是 Card 类型，扩展与 Comparable。
PlayingCard 实现了 Comparable.compareTo 方法如下：

public int hashCode() {
	return ((suit.value()-1)*13) + rank.value();
}

public int compareTo(Card o) {
	return this.hashCode() - o.hanshCode();
}

... 参考






