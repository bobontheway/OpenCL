状态，实现和类型的多继承
类和接口之间的一个显著区别是类可以有字段，而接口不能。此外，可以实例化
一个类来创建一个对象，而这是不能用在接口上的。一个对象将它的状态存储在
字段中，这写字段在类中定义。Java 编程语言不允许扩展多个类的一个原因是为
了避免状态的多重继承问题，这是从多个类继承字段的能力。例如，假设能够定
义一个扩展自多个类的新类。通过实例化该类创建对象时，该对象将从该类所有
超类中继承字段。要是不同超类的方法或构造函数实例化同一个字段该怎么办？
哪个方法或构造函数优先？（问题：这里的同一个字段指哪里的字段？父类还是
子类？重名的字段如何处理？）由于接口不包含字段，因此不必担心由多个状态
继承导致的问题。

实现的多重继承是从多个类中继承已定义方法的能力。这种类型的多重继承（如
命名冲突和歧义）会出现问题。当支持此多重继承编程语言的编译器遇到包含同
名方法的超类时，它们有时无法确定到底该访问或调用哪个成员或方法。此外，
程序员可能在向超类中添加新方法时不知不觉的引入了命名冲突。default 方法
引入了实现多重继承的一种形式。类可以实现多个接口，接口可以包含同名的
default 方法。Java 编译器提供了一些规则来确定哪个 default 方法特定的类
会使用。

Java 编程语言支持类型的多重继承，这是类实现多个接口的能力。一个对象可以
有多种类型：它自己的类的类型和类所实现的所有接口的类型。这意味着，如果
将某个变量声明为接口的类型，那么它的值可以引用任何实现该接口的任何类的
实例化对象。这在 Using an Interface as a Type 中有讨论。

与实现的多重继承一样，类可以继承它扩展的接口中定义的方法的不同实现
（default 或 static）。在这种情况下，编译器或用户必须决定使用哪一个。


