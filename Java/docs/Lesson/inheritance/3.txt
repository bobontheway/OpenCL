重写和隐藏方法（Overriding and Hiding Methods）

1.1 实例方法（Instance Methods）
子类中实例方法和父类中的实例方法有相同的签名（方法名称，加上参数的类型和数目）
和返回类型时，将重写（overrides）超类的方法。   

子类重写方法的能力允许类从超类继承，它们的行为“足够接近”，然后根据需要修改行为。
重写方法具有相同的名称、参数的数目和类型，以及返回类型作为其重写的方法。重写后
的方法还可以返回被重写方法返回类型的子类型。该子类型成为协变（covariant）返回类
型。

当重写方法，可能需要使用 @Override 注释来提示编译器要重写超类中的方法。如果由
于某种原因，编译器检查到该方法在超类中不存在，它将生成一个错误。有关 @Override
的详细信息，请参阅注释。

1.2 静态方法（Static Methods）
如果子类定义的静态方法与超类中的静态方法具有相同的签名，那么子类中的方法将隐
藏（hides）超类中的方法。

隐藏静态方法和重写实例方法的区别具有重要意义：
- 被调用的重写实例方法为子类中的；
- 被调用的隐藏静态方法取决于该调用是来自于子类还是超类。

考虑包含两个类的示例。第一个是 Animal，它包含一个实例方法和一个静态方法：

public class Animal {
	public static void testClassMethod() {
		System.out.println("The static method in Animal");
	}

	public void testInstanceMethod() {
		System.out.println("The instance method in Animal");
	}
}

第二个类，Animal 的子类，叫 Cat：

public class Cat extends Animal {
	public static void testClassMethod() {
		System.out.println("The static method in Cat");
	}
	
	public void testInstanceMethod() {
		System.out.println("The instance method in Cat");
	}

	public static void main(String[] args) {
		Cat myCat = new Cat();
		Animal myAnimal = myCat;
		Animal.testClassMethod(); // Animal -> Invoked from superclass
		myAnimal.testInstanceMethod(); // Cat -> From subclass
	}
}

Cat 类重写了 Animal 中的实例方法，并在 Animal 中隐藏了静态方法。此类中
的 main 方法创建了一个 Cat 实例，并基于类调用了 testClassMethod() 方法，
基于实例调用了 testInstanceMethod 方法。该程序的输入如下：

```java
The static method in Animal
The instance method in Cat
```

正如所描述的那样，被调用的隐藏静态方法来自于超类中，而被调用的重写实例
方法来自于子类中。

1.3 接口方法（Interface Methods）
接口中的 default 方法和 abstract 方法像实例方法一样被继承。但是，当类
或接口的类型（超类型）提供具有相同签名的多个 default 方法时，Java 编译
器遵循继承规则来解决命名冲突。这些规则由以下两个原则驱动：
- 实例方法优先于接口中的 default 方法。考虑以下的类和接口：

public class Horse {
	public String identifyMyself() {
		return "I am a horse";
	}
}

public interface Flyer {
	default public String identifyMyself() {
		return "I am able to fly";
	}
}

public interface Mythical {
	default public String identifyMyself() {
		return "I am a mythical creature.";
	}
}

public class Pegasus extends Horse implements Flyer, Mythical {
	public static void main(String[] args) {
		Pegasus myApp = new Pegasus(); // 飞，天马
		System.out.println(myApp.identifyMyself());
	}
}

方法 Pegasus.identifyMyself 返回 “I am a horse“ 的字符串。

- 已经被其它候选项重写的方法将被忽略。当超类型共享一个共同的
祖先（ancestor）时，就会出现这种情况。

考虑下面的接口和类：

public interface Animal {
	default public String identifyMyself() {
		return "I am an animal.";
	}
}

public interface EggLayer extends Animal { // 蛋
	default public String identifyMyself() {
		return "I am able to lay eggs.";
	}
}

public interface FireBreather extends Animal {}

public class Dragon implents EggLayer, FireBreather { // 火焰
	public static void main(String[] args) {
		Dragon myApp = new Dragon();
		System.out.println(myApp.identifyMyself());
	}
}

方法 Dragon.identifyMyself 返回 “I am able to lay eggs” 的字符串。
（Animal 中的方法被 EggLayer 中的方法重写，将被忽略）

如果两个或多个独立定义的 default 方法产生冲突，或者 default 方法与 abstract
方法发生冲突，那么 Java 编译器将生成编译器错误。必须显示重写超类中的方法。

考虑现在可以飞行的计算机控制的汽车的例子。有两个接口（OperateCar 和 FlyCar），
它们为同一方法（startEngine）提供了默认实现：

public interface OperateCar {
	// ...
	default public int startEngine(EncryptedKey key) {
		// Implementation
	}
}

public interface FlyCar {
	// ...
	default public int startEngine(EncryptedKey key) {
		// Implementation
	}
}

同时实现 OperateCar 和 FlyCar 接口的类必须重写 startEngine 方法。可以使用
super 关键字来调用任何 default 实现。

public class FlyingCar implements OperateCar, FlyCar {
	// ...
	public int startEngine(EncryptedKey key) {
		FlyCar.super.startEngine(key);
		OperateCar.super.startEngine(key);
	}
}

super 前面的名称（在该例子中，FlyCar 或 OperateCar）必须直接引用超接
口（superinterface），它定义或继承 default 方法用来被调用。这种形式的
方法调用不限于区分在实现的多个包含相同签名的 default 方法接口之间。（翻译？）

从类继承的实例方法可以重写抽象接口方法。考虑下面的接口和类：

public interface Mammal {
	String identifyMyself();
}

public class Horse {
	public String identifyMyself() {
		return "I am a horse.";
	}
}

public class Mustang extends Horse implements Mammal { // 野马， 哺乳动物
	public static void main(String[] args) {
		Mustang myApp = new Mustang();
		System.out.println(myApp.identifyMyself());
	}
}

方法 Mustang.identifyMyself 返回 “I am a horse.” 字符串。类 Mustang 从
Horse 类继承了 identifyMyself 方法，它重写了 Mammal 接口中具有相同名称的
abstract 方法。

注意：接口中的 static 方法将永远不会被继承。

1.4 修饰（Modifiers）










