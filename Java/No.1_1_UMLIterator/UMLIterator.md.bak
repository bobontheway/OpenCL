迭代器
意图：提供一种方式，可以顺序访问集合对象中的元素，同时用户在使用过程中无需了解它的底层实现。


动机：
集合对象（例如列表）在不公开其内部结构的同时，应该为用户提供访问其自身元素
的方式。

根据需求，按照不同的方式遍历列表；

对于不同的遍历方式，不想扩展列表的操作接口
不同通过提供操作来扩展列表接口

在同一个列表上，同时有多个遍历存在


迭代器模式的主要功能是访问并遍历列表对象，并将列表对象放到迭代器对象中。

Iterator 类定义了用于访问列表中元素的接口。
迭代器对象负责跟踪当前的元素，它知道那些元素已经被遍历。

例如，下面是 List 类和　ListIterator 之间的关系：

在实实例化　ListIterator 之前，必须提供用来遍历的　List。
一旦拥有了　ListIterator 实例，就可以顺序访问列表中的元素。
CurrentItem 方法返回列表中的当前元素。
First 当首个元素初始化为当前元素，
Next 将下一个元素设置为当前元素，
IsDone　测试是否遍历完了列表中的所有元素，

通过将遍历机制和 List 对象分开，我们可以为不同的遍历策略定义定义迭代器，
这样就不需要在在列表接口中一一实现。

例如，FilteringListIterator 提供

访问那些只满足了指定过滤约束的元素。


