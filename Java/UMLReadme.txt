UML 的规则：

参考 5-2 的示例程序：
1.构造函数前带有 `-` 时，表示该函数是 private； 
2.getInstance 方法带有下划线，表示该方法是 static 方法；

17.4
使用设计模式的目的之一就是使类成为可复用的组件；
设计思想：
- 利用抽象类和接口从具体类中提取出抽象方法；
- 在将实例作为参数传递至类中，或者在类的字段中保存实例时，不使用具体类型，而是使用抽象类型的接口；

这样的实现方式可以帮助我们轻松替换具体类。

17.5
Java 只能单一继承，也就是说如果 Subject 角色已经是某个类的子类了，那么它将
无法继承 java.util.Observable 类。（Observer 接口和 Observable 类并不好用）
