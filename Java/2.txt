今天碰到一个题，问的是聚合和组合的区别，不是很清楚，到网上搜了一段话，摘录如下：

 

聚合：表示两个对象之间是整体和部分的弱关系，部分的生命周期可以超越整体。如电脑和鼠标。

组合：表示两个对象之间是整体和部分的强关系，部分的生命周期不能超越整体，或者说不能脱离整体而存在。组合关系的“部分”，是不能在整体之间进行共享的。

不过，如果你要说，眼睛可以移植，是不是说可以脱离人而存在，它们就不是组合关系了？其实，UML中对象的关系都是在相应的软件环境或实际场景下定义的，这里区别聚合和组合的关系，关键还是在于它们之中整体和部分的关系强、弱，以及它们之间的依附关系。如果刚才说眼睛可以移植给别人，那你也可以把它认为是聚合，这都要结合实际场景来说明。

另外两个比较重要的关系是关联和依赖：
关联：简单的可以认为，如果一个类作为了另外一个类的属性，那一定是关联关系。但你要知道，聚合是一种特殊的关联，而组合又是一种特殊的聚合。一般的关联我们认为是平级的、无整体部分关系的，如朋友关系。

依赖：对象之间的临时关系，临时性体现在不超越方法的周期。简单的说，在方法使用到的，如参数类，就一定是依赖关系。
（以上文章来源于：http://www.blogjava.net/lukangping/archive/2010/08/01/327693.html）

 

is a 关系，那么它是一个集成关系；比如：我 is a 人；再比如菱形、圆形和方形都是形状的一种，那么他们都应该从形状类继承而不是聚合。

has a关系，那么它是一个聚合关系；比如：我 has a 头；再比如电脑是由显示器、CPU、硬盘等组成的，那么你应该把显示器、CPU、硬盘这些类聚合成电脑类，而不是从电脑类继承。

聚合和组合都属于关联，很难区分，但是只要记住一点，区分它们就容易多了：

       处于聚合关系的两个类生命周期不同步，则是聚合关系；处于组合关系的两个类的生命周期同步；eg：聚合关系,当A创建的时候，B不一定创建；当A消亡时，B不一定消亡。class A{   private  B;}class B{....}组合关系，当创建一个A对象时，也会创建一个B对象；当A对象消亡时，作为A的属性的B对象也会消亡。class A{private B b=new B();....}class B{....}

（以上文章来源于：http://hi.baidu.com/yxj1141/blog/item/e7a95f1d7c886b9886d6b679.html）

